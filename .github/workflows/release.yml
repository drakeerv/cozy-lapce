name: Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Tag name for release"
        required: false
        default: nightly
      build_windows:
        description: "Build Windows?"
        required: false
        default: 'true'
#      build_linux:
#        description: "Build Linux?"
#        required: false
#        default: 'false'
  schedule:
    - cron: 0 0 * * *
  push:
    tags: ["v[0-9]+.[0-9]+.[0-9]+*"]
  pull_request:
    paths:
      - .github/workflows/release.yml

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CARGO_TERM_COLOR: always

jobs:
  tagname:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.tag.outputs.tag }}
    steps:
      - id: vars
        shell: bash
        run: echo "sha_short=${GITHUB_SHA::7}" | tee -a $GITHUB_OUTPUT

      - if: github.event_name == 'workflow_dispatch'
        run: echo "TAG_NAME=${{ github.event.inputs.tag_name }}" | tee -a $GITHUB_ENV

      - if: github.event_name == 'schedule' || github.event_name == 'pull_request'
        run: echo 'TAG_NAME=nightly-${{ steps.vars.outputs.sha_short }}' | tee -a $GITHUB_ENV

      - if: github.event_name == 'push'
        run: |
          TAG_NAME=${{ github.ref }}
          echo "TAG_NAME=${TAG_NAME#refs/tags/}" | tee -a $GITHUB_ENV

      - id: tag
        run: echo "tag=$TAG_NAME" | tee -a $GITHUB_OUTPUT

  windows:
    if: github.event.inputs.build_windows != 'false'
    runs-on: windows-latest
    needs: tagname
    env:
      RELEASE_TAG_NAME: ${{ needs.tagname.outputs.tag_name }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Update rust
        run: rustup update --no-self-update

      - name: Fetch dependencies
        run: cargo fetch --locked

      - name: Build
        run: cargo build --frozen --profile release-lto

      - name: Create msi installer
        run: |
          candle.exe -arch "x64" -ext WixUIExtension -ext WixUtilExtension \
            -out "./cozy-lapce.wixobj" "extra/windows/wix/cozy-lapce.wxs"
          light.exe -ext WixUIExtension -ext WixUtilExtension \
            -out "./CozyLapce-windows.msi" -sice:ICE61 -sice:ICE91 \
            "./cozy-lapce.wixobj"

      - name: Create portable
        shell: pwsh
        run: |
          cargo build --profile release-lto --features lapce-app/portable
          Compress-Archive ./target/release-lto/cozy-lapce.exe ./CozyLapce-windows-portable.zip

      - name: Upload artifact for nightly
        if: env.RELEASE_TAG_NAME == 'nightly'
        uses: actions/upload-artifact@v4
        with:
          name: lapce-windows
          path: |
            ./CozyLapce-windows-portable.zip
            ./CozyLapce-windows.msi
          retention-days: 1

      - name: Upload artifact for release
        if: env.RELEASE_TAG_NAME != 'nightly'
        uses: actions/upload-artifact@v4
        with:
          name: lapce-windows
          path: |
            ./CozyLapce-windows-portable.zip
            ./CozyLapce-windows.msi
          retention-days: 30

#  linux:
#    if: github.event.inputs.build_linux != 'false'
#    runs-on: ubuntu-latest
#    needs: tagname
#    env:
#      RELEASE_TAG_NAME: ${{ needs.tagname.outputs.tag_name }}
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Build deb packages
#        run: |
#          docker buildx create --driver=docker-container --use
#          docker buildx bake --pull ubuntu-focal-binary
#
#      - name: Gzip
#        run: |
#          mkdir Cozy-Lapce
#          cp ./target/linux_amd64/cozy-lapce Cozy-Lapce/
#          tar -zcvf ./cozy-lapce-linux-amd64.tar.gz Cozy-Lapce
#          rm -rf Cozy-Lapce
#
#          mkdir Cozy-Lapce
#          cp ./target/linux_arm64/cozy-lapce Cozy-Lapce/
#          tar -zcvf ./cozy-lapce-linux-arm64.tar.gz Cozy-Lapce
#
#      - name: Fetch dependencies
#        run: cargo fetch --locked
#
#      - name: Vendor dependencies
#        run: |
#          cargo vendor --frozen > ./vendor-config.toml
#          mv ./vendor-config.toml ./vendor/
#          tar -zcf vendor.tar.gz ./vendor/
#
#      - uses: actions/upload-artifact@v4
#        with:
#          name: lapce-linux
#          path: |
#            ./cozy-lapce-linux-*.tar.gz
#            ./vendor.tar.gz
#          retention-days: 1

  publish:
    needs:
      - tagname
      - windows
#      - linux
    runs-on: ubuntu-latest
    if: success()
    env:
      GH_REPO: ${{ github.repository }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4

      - name: Set TAG_NAME
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "TAG_NAME=${{ github.event.inputs.tag_name }}" | tee -a $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo 'TAG_NAME=nightly' | tee -a $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            TAG_NAME=${{ github.ref }}
            echo "TAG_NAME=${TAG_NAME#refs/tags/}" | tee -a $GITHUB_ENV
          fi

      - name: Configure release
        run: |
          if [[ "$TAG_NAME" == "nightly" ]]; then
            echo 'SUBJECT=Lapce development build' | tee -a $GITHUB_ENV
            echo 'PRERELEASE=--prerelease' | tee -a $GITHUB_ENV
          else
            echo 'SUBJECT=Lapce release build' | tee -a $GITHUB_ENV
            echo 'PRERELEASE=' | tee -a $GITHUB_ENV
          fi

      - name: Publish release
        env:
          DEBUG: api
        run: |
          gh release create $TAG_NAME $PRERELEASE --title "$TAG_NAME" --target $GITHUB_SHA \
            lapce-windows/* || echo "Release already exists, skipping."
